<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--声明一个名为“log4net“的自定义配置节-->
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>

  <log4net>
    <!--Appenders用来定义日志的输出方式，即日志要写到那种介质上去-->
    <!--控制台Trace Appender -->    <!--ConsoleAppender:将日志输出到应用程序控制台-->
    <appender name="TraceConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <!--Layout用于控制Appender的输出格式-->
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date：%-5level - %message%newline" />
      </layout>
    </appender>
    
    <!--控制台Error Appender -->
    <appender name="ErrorConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date：%-5level - %message%newline" />
      </layout>
    </appender>
    
    <!--文件Trace Appender -->                <!--RollingFileAppender:将日志以回滚文件的形式写到文件中-->              
    <appender name="TraceLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--日志文件路径(相对路径),   按照日期形式输出时，直接连接元素DatePattern的value形成文件路径-->
      <file value="Logs\TraceLogs\Log_"/>
      <!--是否追加到文件-->
      <appendToFile  value="true"/>
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="50" />
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false" />
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingstyle value="Date"/>
      <datePattern value="yyyyMMdd'.txt'"/>
      <!--使用过滤器可以过滤掉Appender输出的内容,  LevelRangeFilter:日志等级在指定范围内的事件才被记录,  框架提供多种过滤器-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <LevelMin value="DEBUG"/>
        <LevelMax value="WARN"/>
      </filter>
      <layout type="log4net.Layout.PatternLayout">
        <!--日志起始-->
        <header value="---------------  TRACE LOG START -----------------------&#13;&#10;" />
        <!--日志结尾-->
        <Footer value="---------------- TRACE LOG CLOSE -----------------------&#13;&#10;" />
        <!-- 输出格式： 发生日志事件的本地时间 ：日志等级 - 输出的消息  换行-->
        <ConversionPattern value="%date：%-5level - %message%newline" />
      </layout>
    </appender>
    
    <!--文件Error Appender -->
    <appender name="ErrorLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="Logs\ErrorLogs\Log_" />
      <appendToFile value="true" />
      <rollingStyle value="Date" />
      <datePattern value="yyyyMMdd'.txt'" />
      <staticLogFileName value="false" />
      <layout type="log4net.Layout.PatternLayout">
        <header value="---------------  ERROR LOG START -----------------------&#13;&#10;" />
        <Footer value="---------------  ERROR LOG CLOSE -----------------------&#13;&#10;" />
        <ConversionPattern value="%date：%-5level - %message%newline" />
      </layout>
    </appender>

    <!--Logger是直接和应用程序交互的组件。Logger只是产生日志，然后由它引用的Appender记录到指定的媒介，并由Layout控制输出格式-->
    <logger name="TraceLog">
      <!--log日志级别： OFF > FATAL > ERROR > WARN > INFO > DEBUG > ALL-->
      <!--高于等级设定值的方法都能写入日志。例如当我们设成Info时，logger.Debug就会被忽略而不写入文件，但是FATAL,ERROR,WARN,INFO会被写入，因为他们等级高于INFO。-->
      <level value="ALL"/>
      <!--引用上文定义的appender-->
      <appender-ref ref="TraceLogFileAppender"/>
      <appender-ref ref="TraceConsoleAppender"/>
    </logger>

    <logger name="ErrorLog">
      <level value="WARN"/>
      <appender-ref ref="ErrorConsoleAppender"/>
      <appender-ref ref="ErrorLogFileAppender"/>
    </logger>
    
  </log4net>
</configuration>
